// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pepela.Data;

#nullable disable

namespace Pepela.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240916164551_TimeSlots")]
    partial class TimeSlots
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pepela.Data.ReservationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Instant?>("CancelledOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ConfirmedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("MadeOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ManagementToken")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("PubQuizSeats")
                        .HasColumnType("integer");

                    b.Property<string>("PubQuizTeamName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("Seats")
                        .HasColumnType("integer");

                    b.Property<bool>("SleepOver")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Pepela.Data.SlottedActivityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Pepela.Data.TimeSlotEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<Instant>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Instant>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("ReservationEntityTimeSlotEntity", b =>
                {
                    b.Property<int>("AssociatedReservationsId")
                        .HasColumnType("integer");

                    b.Property<int>("AssociatedTimeSlotsId")
                        .HasColumnType("integer");

                    b.HasKey("AssociatedReservationsId", "AssociatedTimeSlotsId");

                    b.HasIndex("AssociatedTimeSlotsId");

                    b.ToTable("ReservationEntityTimeSlotEntity");
                });

            modelBuilder.Entity("Pepela.Data.TimeSlotEntity", b =>
                {
                    b.HasOne("Pepela.Data.SlottedActivityEntity", "Activity")
                        .WithMany("TimeSlots")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("ReservationEntityTimeSlotEntity", b =>
                {
                    b.HasOne("Pepela.Data.ReservationEntity", null)
                        .WithMany()
                        .HasForeignKey("AssociatedReservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pepela.Data.TimeSlotEntity", null)
                        .WithMany()
                        .HasForeignKey("AssociatedTimeSlotsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pepela.Data.SlottedActivityEntity", b =>
                {
                    b.Navigation("TimeSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
